pipeline {
    agent any

    tools {
        jdk 'JDK17'
        maven 'MAVEN3'
    }

    environment {
        SCANNER_HOME = tool 'sonarscanner4'
        NEXUS_VERSION = 'nexus3'
        NEXUS_PROTOCOL = 'http'
        NEXUS_URL = '172.31.84.126:8081'
        NEXUS_REPOSITORY = 'vprofile-release'
        NEXUS_CREDENTIALS_ID = 'nexuslogin'
        SLACK_CHANNEL = '#devopscicd'
        SLACK_CREDENTIAL_ID = 'slack-token-id' // replace with your Jenkins credential ID for Slack bot token
    }

    stages {

        stage('Checkout') {
            steps {
                git branch: 'atom', url: 'https://github.com/hkhcoder/vprofile-project.git'
            }
        }

        stage('Build') {
            steps {
                sh 'mvn clean package -DskipTests'
            }
            post {
                success {
                    archiveArtifacts artifacts: '**/target/*.war', allowEmptyArchive: true
                }
            }
        }

        stage('Unit Tests') {
            steps {
                sh 'mvn test'
            }
        }

        stage('SonarQube Analysis') {
            steps {
                withSonarQubeEnv('sonar-pro') {
                    sh '''
                        $SCANNER_HOME/bin/sonar-scanner \
                        -Dsonar.projectKey=vprofile \
                        -Dsonar.java.binaries=target/classes
                    '''
                }
            }
        }

        stage('Quality Gate') {
            steps {
                timeout(time: 1, unit: 'MINUTES') {
                    waitForQualityGate abortPipeline: true
                }
            }
        }

        stage('Upload to Nexus') {
            steps {
                script {
                    def pom = readMavenPom file: 'pom.xml'
                    def filesByGlob = findFiles(glob: 'target/*.war')

                    if (filesByGlob.size() == 0) {
                        error 'No WAR artifacts found to upload!'
                    }

                    def artifactPath = filesByGlob[0].path
                    if (!fileExists(artifactPath)) {
                        error "File ${artifactPath} not found!"
                    }

                    def uploadVersion = "${pom.version}.${env.BUILD_ID}"

                    retry(2) {
                        nexusArtifactUploader(
                            nexusVersion: NEXUS_VERSION,
                            protocol: NEXUS_PROTOCOL,
                            nexusUrl: NEXUS_URL,
                            groupId: pom.groupId,
                            version: uploadVersion,
                            repository: NEXUS_REPOSITORY,
                            credentialsId: NEXUS_CREDENTIALS_ID,
                            artifacts: [
                                [artifactId: pom.artifactId,
                                 classifier: '',
                                 file: artifactPath,
                                 type: pom.packaging],
                                [artifactId: pom.artifactId,
                                 classifier: '',
                                 file: 'pom.xml',
                                 type: 'pom']
                            ]
                        )
                    }

                    echo "Artifacts uploaded successfully to Nexus for version ${uploadVersion}!"
                }
            }
        }

    }

    post {
        always {
            echo 'Sending Slack notification...'
            script {
                def COLOR_MAP = [
                    'SUCCESS': 'good',
                    'FAILURE': 'danger',
                    'UNSTABLE': 'warning',
                    'ABORTED': 'warning'
                ]

                slackSend(
                    channel: env.SLACK_CHANNEL,
                    color: COLOR_MAP[currentBuild.currentResult],
                    message: "*${currentBuild.currentResult}:* Job `${env.JOB_NAME}` build `${env.BUILD_NUMBER}`\nCheck console output at ${env.BUILD_URL}",
                    tokenCredentialId: 'slacktoken',  // <--- use your actual Jenkins credential ID here
                )
            }
        }

        success {
            echo 'Pipeline completed successfully 🎉'
        }

        failure {
            echo 'Pipeline failed ❌ Check the logs above.'
        }
    }
}
